---
name: Terraform Apply & NGINX TLS Config

on:
  workflow_dispatch:

jobs:
  terraform-apply:
    name: Terraform Apply and TLS NGINX Setup
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-west-3
      TF_IN_AUTOMATION: true
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_end_user_username: ${{ secrets.CMS_USER_USERNAME }}
      TF_VAR_end_user_password: ${{ secrets.CMS_USER_PASSWORD }}
      TF_VAR_developer_username: ${{ secrets.DEV_USERNAME }}
      TF_VAR_developer_password: ${{ secrets.DEV_PASSWORD }}
      TF_VAR_ops_username: ${{ secrets.OPS_USERNAME }}
      TF_VAR_ops_password: ${{ secrets.OPS_PASSWORD }}
      TF_VAR_sre_username: ${{ secrets.SRE_USERNAME }}
      TF_VAR_sre_password: ${{ secrets.SRE_PASSWORD }}
      TF_VAR_instructor_username: ${{ secrets.INSTRUCTOR_USERNAME }}
      TF_VAR_instructor_password: ${{ secrets.INSTRUCTOR_PASSWORD }}
      TF_VAR_db_username: ${{ secrets.DEV_USERNAME }}
      TF_VAR_db_password: ${{ secrets.DEV_PASSWORD }}
      TF_VAR_ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments/dev

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Taint EC2 Instances to force recreation
        run: |
          terraform taint module.ec2.aws_instance.cms \
          || echo "cms not found or already tainted"
          terraform taint module.ec2.aws_instance.k3s \
          || echo "k3s not found or already tainted"

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Wait for EC2 and RDS readiness
        run: |
          echo "Warte 60 Sekunden, bis EC2 und RDS bereit sind..."
          sleep 120

      - name: Save EC2 IP to file
        id: get-ip
        run: |
          echo "EC2_IP=$(terraform output -raw ec2_instance_public_ip)" \
          >> $GITHUB_ENV
          echo "Connecting to EC2 IP: $EC2_IP"

      - name: Restore SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Extract TLS Outputs to Files
        run: |
          terraform output -raw tls_cert > cert.pem
          terraform output -raw tls_key > tls.key

      - name: Installing nginx if needed
        run: |
          echo "Installing and configuring NGINX on EC2..."
          echo "Connecting to ${{ secrets.DEV_USERNAME }}@$EC2_IP"
          ssh  -o StrictHostKeyChecking=no -i key.pem \
          "${{ secrets.DEV_USERNAME }}@$EC2_IP" << EOF
            # Check if nginx is installed
            if ! command -v nginx > /dev/null; then
              echo "NGINX not found. Installing..."
              sudo apt update
              sudo apt install -y nginx
              sudo systemctl enable nginx
              sudo systemctl start nginx
            else
              echo "NGINX is already installed."
            fi
          EOF

      - name: Upload TLS to EC2 & Configure NGINX
        run: |
          echo "Uploading certs and configuring NGINX on EC2..."
          scp -o StrictHostKeyChecking=no \
              -i key.pem \
              cert.pem tls.key \
               "${{ secrets.DEV_USERNAME }}@$EC2_IP":/tmp/

          ssh -o StrictHostKeyChecking=no -i key.pem \
           "${{ secrets.DEV_USERNAME }}@$EC2_IP" << EOF
            sudo mkdir -p /etc/nginx/ssl
            sudo mv /tmp/cert.pem /etc/nginx/ssl/
            sudo mv /tmp/tls.key /etc/nginx/ssl/

            sudo tee /etc/nginx/sites-available/default > /dev/null << EOF
              server {
                listen 443 ssl;
                server_name wpf.drachenbyte.ddns-ip.net;

                ssl_certificate /etc/nginx/ssl/cert.pem;
                ssl_certificate_key /etc/nginx/ssl/tls.key;

                location / {
                  proxy_pass http://localhost:3000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                }
              }

              server {
                listen 443 ssl;
                server_name prestaf.drachenbyte.ddns-ip.net;

                ssl_certificate /etc/nginx/ssl/cert.pem;
                ssl_certificate_key /etc/nginx/ssl/tls.key;

                location / {
                  proxy_pass http://localhost:4000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                }
              }
            EOF

            sudo systemctl restart nginx
          EOF

      - name: Terraform Output
        id: tfoutput
        run: |
          echo "DB_ENDPOINT=$(terraform output -raw mariadb_endpoint)" \
          >> $GITHUB_ENV
          echo "DB_NAME=$(terraform output -raw mariadb_name)" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DEV_USERNAME }}" >> $GITHUB_ENV
          echo "DB_PASS=$${{ secrets.DEV_PASSWORD }}" >> $GITHUB_ENV

      - name: Set K3s Private IP from Terraform
        run: echo "K3S_IP=$(terraform output -raw k3s_public_ip)" >> $GITHUB_ENV

      - name: Create TLS Secret in K3s via SSH
        run: |
          echo "Creating Kubernetes TLS Secret in K3s cluster..."
          ssh -o StrictHostKeyChecking=no -i key.pem \
          "${{ secrets.DEV_USERNAME }}@${{ env.K3S_IP }}" bash << EOF
            if command -v kubectl >/dev/null 2>&1; then
              KUBECTL="kubectl"
            elif command -v k3s >/dev/null 2>&1; then
              KUBECTL="k3s kubectl"
            else
              echo "Neither kubectl nor k3s found. Aborting."
              exit 1
            fi
            $KUBECTL get secret tls-secret --namespace default \
            >/dev/null 2>&1 || \
            $KUBECTL create secret tls tls-secret \
            --cert=/etc/nginx/ssl/cert.pem \
            --key=/etc/nginx/ssl/tls.key \
            --namespace default
          EOF

      - name: Deploy WordPress & PrestaShop via K3s on EC2
        run: |
          echo "Preparing WordPress & PrestaShop deployment..."
          echo "DB_ENDPOINT=$(terraform output -raw mariadb_endpoint)" \
          >> $GITHUB_ENV
          echo "DB_NAME=$(terraform output -raw mariadb_name)" >> $GITHUB_ENV
          scp -o StrictHostKeyChecking=no -i key.pem -r ./k8s/wordpress \
          "${{ secrets.DEV_USERNAME }}@${{ env.K3S_IP }}":/home/ubuntu/
          scp -o StrictHostKeyChecking=no -i key.pem -r ./k8s/prestashop \
          "${{ secrets.DEV_USERNAME }}@${{ env.K3S_IP }}":/home/ubuntu/
          ssh -o StrictHostKeyChecking=no -i key.pem \
          "${{ secrets.DEV_USERNAME }}@${{ env.K3S_IP }}" bash << EOF
            echo "Setzen der Umgebungsvariablen..."
            export DB_ENDPOINT=${{ env.DB_ENDPOINT }}
            export DB_NAME=${{ env.DB_NAME }}
            export DB_USER=${{ env.TF_VAR_db_username }}
            export DB_PASS=${{ env.TF_VAR_db_password }}
            if command -v kubectl >/dev/null 2>&1; then
              KUBECTL="kubectl"
            elif command -v k3s >/dev/null 2>&1; then
              KUBECTL="k3s kubectl"
            else
              echo "Kein kubectl oder k3s gefunden â€“ Abbruch."
              exit 1
            fi
            echo "WordPress wird deployed..."
            envsubst < /home/ubuntu/wordpress/mariadb-secret.yaml.template \
            > /home/ubuntu/wordpress/mariadb-secret.yaml
            $KUBECTL apply -f /home/ubuntu/wordpress/mariadb-secret.yaml
            $KUBECTL apply -f /home/ubuntu/wordpress/deployment.yaml
            $KUBECTL apply -f /home/ubuntu/wordpress/service.yaml
            $KUBECTL apply -f /home/ubuntu/wordpress/ingress.yaml
            echo "PrestaShop wird deployed..."
            envsubst < /home/ubuntu/prestashop/mariadb-secret.yaml.template \
            > /home/ubuntu/prestashop/mariadb-secret.yaml
            $KUBECTL apply -f /home/ubuntu/prestashop/mariadb-secret.yaml
            $KUBECTL apply -f /home/ubuntu/prestashop/deployment.yaml
            $KUBECTL apply -f /home/ubuntu/prestashop/service.yaml
            $KUBECTL apply -f /home/ubuntu/prestashop/ingress.yaml
          EOF

      - name: Upload and install Monitoring on EC2
        run: |
          echo "Uploading install-monitoring.sh to EC2 and executing it..."
          scp -o StrictHostKeyChecking=no -i key.pem install-monitoring.sh \
          "${{ secrets.DEV_USERNAME }}@${{ env.K3S_IP }}":/home/ubuntu/
          ssh -o StrictHostKeyChecking=no -i key.pem \
          "${{ secrets.DEV_USERNAME }}@${{ env.K3S_IP }}" <<EOF
            chmod +x /home/ubuntu/install-monitoring.sh
            bash /home/ubuntu/install-monitoring.sh
          EOF

      - name: MariaDB Backup to S3
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem \
          "${{ secrets.DEV_USERNAME }}@$EC2_IP" << EOF
            set -e
            TIMESTAMP=\$(date +%F-%H%M)
            mysqldump -h ${{ env.DB_ENDPOINT }} \
            -u ${{ secrets.DEV_USERNAME }} \
            -p ${{ secrets.DEV_PASSWORT }} \
            ${{ env.DB_NAME }} > \$BACKUP_FILE
            aws s3 cp \$BACKUP_FILE s3://wp-presta-backups/db-backups/ \
            --region eu-west-3
          EOF
