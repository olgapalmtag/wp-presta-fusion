---
name: Terraform Apply & NGINX TLS Config

on:
  workflow_dispatch:

jobs:
  terraform-apply:
    name: Terraform Apply and TLS NGINX Setup
    runs-on: ubuntu-latest

    env:
      TF_LOG: DEBUG
      AWS_REGION: eu-west-3
      TF_IN_AUTOMATION: true
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_end_user_username: ${{ secrets.CMS_USER_USERNAME }}
      TF_VAR_end_user_password: ${{ secrets.CMS_USER_PASSWORD }}
      TF_VAR_developer_username: ${{ secrets.DEV_USERNAME }}
      TF_VAR_developer_password: ${{ secrets.DEV_PASSWORD }}
      TF_VAR_ops_username: ${{ secrets.OPS_USERNAME }}
      TF_VAR_ops_password: ${{ secrets.OPS_PASSWORD }}
      TF_VAR_sre_username: ${{ secrets.SRE_USERNAME }}
      TF_VAR_sre_password: ${{ secrets.SRE_PASSWORD }}
      TF_VAR_instructor_username: ${{ secrets.INSTRUCTOR_USERNAME }}
      TF_VAR_instructor_password: ${{ secrets.INSTRUCTOR_PASSWORD }}
      TF_VAR_db_username: ${{ secrets.DEV_USERNAME }}
      TF_VAR_db_password: ${{ secrets.DEV_PASSWORD }}
      TF_VAR_ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments/dev

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Taint EC2 Instances to force recreation
        run: |
          terraform taint module.ec2.aws_instance.cms \
          || echo "cms not found or already tainted"
          terraform taint module.ec2.aws_instance.k3s \
          || echo "k3s not found or already tainted"

      - name: Set ACM_CERT_ARN env var
        run: |
          echo "ACM_CERT_ARN=${{ secrets.ACM_CERT_ARN }}" \
          >> $GITHUB_ENV

      - name: Terraform Plan
        run: |
          terraform plan \
          -var="acm_certificate_arn=${ACM_CERT_ARN}"

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
          -var="acm_certificate_arn=${ACM_CERT_ARN}"

      - name: Wait for EC2 and RDS readiness
        run: |
          echo "Warte 60 Sekunden, bis EC2 und RDS bereit sind..."
          sleep 120

      - name: Save EC2 IP K3S IP K3S PIP
        id: get-ip
        run: |
          echo "EC2_IP=$(terraform output -raw ec2_instance_public_ip)" \
          >> $GITHUB_ENV
          echo "K3S_IP=$(terraform output -raw k3s_public_ip)" \
          >> $GITHUB_ENV
          echo "EC2 IP: $EC2_IP"
          echo "K3S_PIP=$(terraform output -raw k3s_private_ip)" \
          >> $GITHUB_ENV
          echo "K3S PIP: $K3S_PIP"

      - name: Restore SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Extract TLS Outputs to Files
        run: |
          echo "$(terraform output -raw tls_cert)" > cert.pem
          echo "$(terraform output -raw tls_key)" > tls.key

      - name: Upload TLS to EC2 & Configure NGINX
        run: |
          echo "Uploading certs and configuring NGINX on EC2..."
          scp -o StrictHostKeyChecking=no \
              -i key.pem \
              cert.pem tls.key \
               "${{ secrets.DEV_USERNAME }}@$EC2_IP":/tmp/
          echo "K3S_PRIVATE_IP=$(terraform output -raw k3s_private_ip)" \
          >> $GITHUB_ENV

          ssh -o StrictHostKeyChecking=no -i key.pem \
          "${{ secrets.DEV_USERNAME }}@$EC2_IP" << EOF
            sudo mkdir -p /etc/nginx/ssl
            sudo mv -v  /tmp/cert.pem /etc/nginx/ssl/
            sudo mv -v /tmp/tls.key /etc/nginx/ssl/
            sudo chown root:root /etc/nginx/ssl/*
            sudo chmod 600 /etc/nginx/ssl/*
            ls -l /etc/nginx/ssl/cert.pem /etc/nginx/ssl/tls.key \
            || exit 1
            K3S_PRIVATE_IP="${K3S_PIP}"
            sudo sed -i "s/k3s_node_private/${K3S_PRIVATE_IP}/g" \
            /etc/nginx/sites-available/default
            sudo nginx -t || true
            sudo systemctl reload nginx || true

          EOF

      - name: Terraform Output
        id: tfoutput
        run: |
          echo "DB_ENDPOINT=$(terraform output -raw mariadb_endpoint)" \
          >> $GITHUB_ENV
          echo "DB_NAME=$(terraform output -raw mariadb_name)" \
          >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DEV_USERNAME }}" >> $GITHUB_ENV
          echo "DB_PASS=$${{ secrets.DEV_PASSWORD }}" >> $GITHUB_ENV

      - name: Copy TLS to K3s
        run: |
          scp -o StrictHostKeyChecking=no -i key.pem \
          cert.pem tls.key \
          "${{ secrets.DEV_USERNAME }}@$K3S_IP":/tmp/

      - name: Create TLS Secret in K3s via SSH
        run: |
          echo "Creating Kubernetes TLS Secret in K3s cluster..."
          ssh -o StrictHostKeyChecking=no -i key.pem \
          "${{ secrets.DEV_USERNAME }}@$K3S_IP"  << 'EOF'
            set -e
            sudo mkdir -p /etc/nginx/ssl
            sudo mv -v  /tmp/cert.pem /etc/nginx/ssl/
            sudo mv -v /tmp/tls.key /etc/nginx/ssl/
            sudo chown root:root /etc/nginx/ssl/*
            sudo chmod 644 /etc/nginx/ssl/*
            ls -l /etc/nginx/ssl/cert.pem /etc/nginx/ssl/tls.key || exit 1
            if command -v kubectl >/dev/null 2>&1; then
              kubectl delete secret wpf-tls --ignore-not-found || true
              kubectl create secret tls wpf-tls \
              --cert=/etc/nginx/ssl/cert.pem \
              --key=/etc/nginx/ssl/tls.key
              kubectl -n monitoring create secret tls gr-secret \
              --cert=/etc/nginx/ssl/cert.pem \
              --key=/etc/nginx/ssl/tls.key
            elif command -v k3s >/dev/null 2>&1; then
              k3s delete secret wpf-tls --ignore-not-found || true
              k3c create secret tls wpf-tls \
              --cert=/etc/nginx/ssl/cert.pem \
              --key=/etc/nginx/ssl/tls.key
              k3s kubectl -n monitoring create secret tls gr-secret \
              --cert=/etc/nginx/ssl/cert.pem \
              --key=/etc/nginx/ssl/tls.key
            else
              echo "Neither kubectl nor k3s found â€“ aborting."
              exit 1
            fi
          EOF

      - name: Deploy WordPress & PrestaShop via K3s on EC2
        run: |
          echo "Preparing WordPress & PrestaShop deployment..."
          echo "DB_ENDPOINT=$(terraform output -raw mariadb_endpoint)" \
          >> $GITHUB_ENV
          echo "DB_NAME=$(terraform output -raw mariadb_name)" \
          >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DEV_USERNAME }}" \
          >> $GITHUB_ENV
          echo "DB_PASS=${{ secrets.DEV_PASSWORD }}" \
          >> $GITHUB_ENV
          DB_ENDPOINT=$(terraform output -raw mariadb_endpoint)
          DB_NAME=$(terraform output -raw mariadb_name)
          DB_USER=${{ secrets.DEV_USERNAME }}
          DB_PASS=${{ secrets.DEV_PASSWORD }}
          scp -o StrictHostKeyChecking=no -i key.pem -r \
          ../../../k8s/wordpress \
          "${{ secrets.DEV_USERNAME }}@$K3S_IP"\
          :/home/ubuntu/
          scp -o StrictHostKeyChecking=no -i key.pem -r \
          ../../../k8s/prestashop \
          "${{ secrets.DEV_USERNAME }}@$K3S_IP"\
          :/home/ubuntu/
          echo "Uploading install-monitoring.sh to EC2 and executing it..."
          scp -o StrictHostKeyChecking=no -i key.pem \
          init_scripts/install-monitoring.sh \
          "${{ secrets.DEV_USERNAME }}@$K3S_IP":/home/ubuntu/
          ssh -o StrictHostKeyChecking=no -i key.pem \
          "${{ secrets.DEV_USERNAME }}@$K3S_IP" \
          << EOF
            set -e
            echo "Install monitoring"
            chmod +x /home/ubuntu/install-monitoring.sh
            bash /home/ubuntu/install-monitoring.sh
            echo "Set Environment variables..."
            GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/
            GF_SERVER_SERVE_FROM_SUB_PATH=false
            export DB_ENDPOINT="${DB_ENDPOINT}"
            export DB_NAME="${DB_NAME}"
            export DB_USER="${DB_USER}"
            export DB_PASS="${DB_PASS}"
            echo "WordPress deploy..."
            envsubst < /home/ubuntu/wordpress/mariadb-secret.yaml.template \
            > /home/ubuntu/wordpress/mariadb-secret.yaml
            sudo chmod 644 /etc/rancher/k3s/k3s.yaml
            export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
            if command -v kubectl >/dev/null 2>&1; then
              echo "Kubectl apply wordpress"
              kubectl -n kube-system delete deploy \
              traefik --ignore-not-found
              kubectl -n kube-system delete \
              deploy,svc,cm,sa,role,rolebinding \
              -l app.kubernetes.io/name=traefik --ignore-not-found
              kubectl -n kube-system delete rs -l \
              app.kubernetes.io/name=traefik --ignore-not-found
              kubectl -n kube-system delete pod -l \
              app.kubernetes.io/name=traefik --ignore-not-found
              kubectl apply -f /home/ubuntu/wordpress/mariadb-secret.yaml
              kubectl apply -f /home/ubuntu/wordpress/deployment.yaml
              kubectl apply -f /home/ubuntu/wordpress/service.yaml
              kubectl apply -f \
              /home/ubuntu/wordpress/traefik-service-nodeport.yaml
              kubectl apply -f /home/ubuntu/wordpress/ingress.yaml
              kubectl apply -f /home/ubuntu/wordpress/grafana_ingress.yaml
            elif command -v k3s >/dev/null 2>&1; then
              echo "k3c Kubectl apply worpress"
              k3s kubectl -n kube-system delete deploy \
              traefik --ignore-not-found
              k3s kubectl -n kube-system delete \
              deploy,svc,cm,sa,role,rolebinding \
              -l app.kubernetes.io/name=traefik --ignore-not-found
              k3s kubectl -n kube-system delete rs -l
              app.kubernetes.io/name=traefik --ignore-not-found
              k3s kubectl -n kube-system delete pod -l \
              app.kubernetes.io/name=traefik --ignore-not-found
              k3s kubectl apply -f /home/ubuntu/wordpress/mariadb-secret.yaml
              k3s kubectl apply -f /home/ubuntu/wordpress/deployment.yaml
              k3s kubectl apply -f /home/ubuntu/wordpress/service.yaml
              k3s kubectl apply -f \
              /home/ubuntu/wordpress/traefik-service-nodeport.yaml
              k3s kubectl apply -f /home/ubuntu/wordpress/ingress.yaml
              k3s kubectl apply -f /home/ubuntu/wordpress/grafana_ingress.yaml
            else
              echo "no  kubectl oder k3s gefunden â€“ exit"
              exit 1
            fi
            #  echo "PrestaShop will be deployed..."
            # envsubst < /home/ubuntu/prestashop/mariadb-secret.yaml.template \
            #> /home/ubuntu/prestashop/mariadb-secret.yaml
            #if command -v kubectl >/dev/null 2>&1; then
            #echo "Kubectl apply prestashop"
            #  kubectl apply -f /home/ubuntu/prestashop/mariadb-secret.yaml
            #  kubectl apply -f /home/ubuntu/prestashop/deployment.yaml
            #  kubectl apply -f /home/ubuntu/prestashop/service.yaml
            #  kubectl apply -f /home/ubuntu/prestashop/ingress.yaml
            #elif command -v k3s >/dev/null 2>&1; then
            #  echo "k3c Kubectl apply prestashop"
            #  k3s kubectl apply -f /home/ubuntu/prestashop/mariadb-secret.yaml
            #  k3s kubectl apply -f /home/ubuntu/prestashop/deployment.yaml
            #  k3s kubectl apply -f /home/ubuntu/prestashop/service.yaml
            #  k3s kubectl apply -f /home/ubuntu/prestashop/ingress.yaml
            #else
            #  echo "Kein kubectl oder k3s gefunden â€“ Abbruch."
            #  exit 1
            #fi
          EOF
