---
name: Terraform Apply & NGINX TLS Config

on:
  workflow_dispatch:

jobs:
  terraform-apply:
    name: Terraform Apply and TLS NGINX Setup
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-west-3
      TF_IN_AUTOMATION: true
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_end_user_username: ${{ secrets.CMS_USER_USERNAME }}
      TF_VAR_end_user_password: ${{ secrets.CMS_USER_PASSWORD }}
      TF_VAR_developer_username: ${{ secrets.DEV_USERNAME }}
      TF_VAR_developer_password: ${{ secrets.DEV_PASSWORD }}
      TF_VAR_ops_username: ${{ secrets.OPS_USERNAME }}
      TF_VAR_ops_password: ${{ secrets.OPS_PASSWORD }}
      TF_VAR_sre_username: ${{ secrets.SRE_USERNAME }}
      TF_VAR_sre_password: ${{ secrets.SRE_PASSWORD }}
      TF_VAR_instructor_username: ${{ secrets.INSTRUCTOR_USERNAME }}
      TF_VAR_instructor_password: ${{ secrets.INSTRUCTOR_PASSWORD }}
      TF_VAR_db_username: ${{ secrets.DEV_USERNAME }}
      TF_VAR_db_password: ${{ secrets.DEV_PASSWORD }}
      TF_VAR_ami_id: ${{ secrets.AMI_ID }}

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments/dev

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Taint EC2 Instances to force recreation
        run: |
          terraform taint module.ec2.aws_instance.cms \
          || echo "cms not found or already tainted"
          terraform taint module.ec2.aws_instance.k3s \
          || echo "k3s not found or already tainted"

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Wait for EC2 and RDS readiness
        run: |
          echo "Warte 60 Sekunden, bis EC2 und RDS bereit sind..."
          sleep 120

      - name: Save EC2 IP to file
        id: get-ip
        run: |
          echo "EC2_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV

      - name: Create TLS Certificate Files
        run: |
          echo "${{ secrets.TLS_CERT }}" > cert.pem
          echo "${{ secrets.TLS_KEY }}" > tls.key

      - name: Upload TLS to EC2 & Configure NGINX
        run: |
          echo "Uploading certs and configuring NGINX on EC2..."
          scp -o StrictHostKeyChecking=no \
              -i key.pem \
              cert.pem tls.key \
              ubuntu:$EC2_IP:/tmp/

          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@$EC2_IP <<EOF
            sudo mkdir -p /etc/nginx/ssl
            sudo mv /tmp/cert.pem /etc/nginx/ssl/
            sudo mv /tmp/tls.key /etc/nginx/ssl/

            sudo tee /etc/nginx/sites-available/default > /dev/null <<'EOL'
              server {
                listen 443 ssl;
                server_name wpf.drachenbyte.ddns-ip.net;

                ssl_certificate /etc/nginx/ssl/cert.pem;
                ssl_certificate_key /etc/nginx/ssl/tls.key;

                location / {
                  proxy_pass http://localhost:3000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                }
              }

              server {
                listen 443 ssl;
                server_name prestaf.drachenbyte.ddns-ip.net;

                ssl_certificate /etc/nginx/ssl/cert.pem;
                ssl_certificate_key /etc/nginx/ssl/tls.key;

                location / {
                  proxy_pass http://localhost:4000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                }
              }
            EOL

            sudo systemctl restart nginx
          EOF

      - name: Terraform Output
        id: tfoutput
        run: |
          echo "DB_ENDPOINT=$(terraform output -raw db_endpoint)" >> $GITHUB_ENV
          echo "DB_NAME=$(terraform output -raw db_name)" >> $GITHUB_ENV
          echo "DB_USER=$TF_VAR_db_username" >> $GITHUB_ENV
          echo "DB_PASS=$TF_VAR_db_password" >> $GITHUB_ENV

      - name: Create TLS Secret in K3s via SSH
        run: |
          echo "Creating Kubernetes TLS Secret in K3s cluster..."

          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@$EC2_IP <<'EOF'
            kubectl get secret tls-secret >/dev/null 2>&1 || \
            kubectl create secret tls tls-secret \
              --cert=/etc/nginx/ssl/cert.pem \
              --key=/etc/nginx/ssl/tls.key \
              --namespace default
          EOF

      - name: Deploy WordPress & PrestaShop via K3s on EC2
        run: |
          echo "Preparing WordPress & PrestaShop deployment..."

          # Terraform Output -> GitHub ENV
          echo "DB_ENDPOINT=$(terraform output -raw db_endpoint)" >> $GITHUB_ENV
          echo "DB_NAME=$(terraform output -raw db_name)" >> $GITHUB_ENV

          # Deployment-Dateien nach EC2 kopieren
          scp -o StrictHostKeyChecking=no -i key.pem -r ./k8s/wordpress \
            ubuntu@$EC2_IP:/home/ubuntu/
          scp -o StrictHostKeyChecking=no -i key.pem -r ./k8s/prestashop \
            ubuntu@$EC2_IP:/home/ubuntu/

          # Remote SSH + K8s Apply
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@$EC2_IP <<'EOF'
            echo "Setzen der Umgebungsvariablen..."
            export DB_ENDPOINT=${{ env.DB_ENDPOINT }}
            export DB_NAME=${{ env.DB_NAME }}
            export DB_USER=${{ env.TF_VAR_db_username }}
            export DB_PASS=${{ env.TF_VAR_db_password }}

            echo "WordPress wird deployed..."
            envsubst < /home/ubuntu/wordpress/mariadb-secret.yaml.template \
              > /home/ubuntu/wordpress/mariadb-secret.yaml
            kubectl apply -f /home/ubuntu/wordpress/mariadb-secret.yaml
            kubectl apply -f /home/ubuntu/wordpress/deployment.yaml
            kubectl apply -f /home/ubuntu/wordpress/service.yaml
            kubectl apply -f /home/ubuntu/wordpress/ingress.yaml

            echo "PrestaShop wird deployed..."
            envsubst < /home/ubuntu/prestashop/mariadb-secret.yaml.template \
              > /home/ubuntu/prestashop/mariadb-secret.yaml
            kubectl apply -f /home/ubuntu/prestashop/mariadb-secret.yaml
            kubectl apply -f /home/ubuntu/prestashop/deployment.yaml
            kubectl apply -f /home/ubuntu/prestashop/service.yaml
            kubectl apply -f /home/ubuntu/prestashop/ingress.yaml
          EOF
