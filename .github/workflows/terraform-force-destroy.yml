---

name: Terraform Force Destroy

on:
  workflow_dispatch:

jobs:
  terraform-force-destroy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments/dev

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-west-3
      TF_AMI_ID: ${{ secrets.TF_AMI_ID }}
      TF_VAR_instance_type: t2.micro
      TF_KEY_NAME: ${{ secrets.TF_KEY_NAME }}
      TF_DB_PASSWORD: ${{ secrets.TF_DB_PASSWORD }}
      TF_LOG: INFO
      TF_IN_AUTOMATION: true

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init

      - name: Remove Critical Resources from State (DB, ALB, EC2, IAM, S3)
        run: |
          CRITICAL_RESOURCES=(
            "module.mariadb.aws_db_instance.mariadb"
            "module.mariadb.aws_db_subnet_group.mariadb_subnet_group"
            "module.alb.aws_lb_listener.http"
            "module.alb.aws_lb_target_group.cms"
            "module.alb.aws_lb.main"
            "module.ec2.aws_instance.cms"
            "module.ec2.aws_instance.k3s"
            "module.ec2.aws_security_group.alb"
            "module.ec2.aws_security_group.instance"
            "module.ec2.aws_iam_role.ec2_s3_backup_role"
            "module.ec2.aws_iam_policy.s3_backup_policy"
            "module.ec2.aws_iam_role_policy_attachment.ec2_s3_backup_attach"
            "module.s3_backup.aws_s3_bucket.backup"
          )

          for res in "${CRITICAL_RESOURCES[@]}"; do
            terraform state rm "$res" || echo "$res not found in state"
          done

      - name: Remove VPC Networking Resources
        run: |
          NETWORK_RESOURCES=(
            "module.vpc.aws_nat_gateway.nat"
            "module.vpc.aws_eip.nat_eip"
            "module.vpc.aws_subnet.public_a"
            "module.vpc.aws_subnet.public_b"
            "module.vpc.aws_subnet.private_a"
            "module.vpc.aws_subnet.private_b"
            "module.vpc.aws_route_table_association.public_a"
            "module.vpc.aws_route_table_association.public_b"
            "module.vpc.aws_route_table_association.private_a"
            "module.vpc.aws_route_table_association.private_b"
            "module.vpc.aws_route_table.public"
            "module.vpc.aws_route_table.private"
            "module.vpc.aws_internet_gateway.igw"
            "module.vpc.aws_vpc.main"
          )

          for res in "${NETWORK_RESOURCES[@]}"; do
            terraform state rm "$res" || echo "$res not found in state"
          done

      - name: Terraform Destroy
        run: |
          terraform destroy -auto-approve \
            -var="ami_id=${TF_AMI_ID}" \
            -var="instance_type=${TF_VAR_instance_type}" \
            -var="key_name=${TF_KEY_NAME}" \
            -var="db_password=${TF_DB_PASSWORD}"
