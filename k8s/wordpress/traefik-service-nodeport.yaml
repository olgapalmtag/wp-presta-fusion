# =========================
# ServiceAccount
# =========================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik-ingress-controller
  namespace: kube-system

---
# =========================
# RBAC: ClusterRole
# =========================
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: traefik-ingress-controller
rules:
  - apiGroups: [""]
    resources: ["services","endpoints","secrets","nodes","pods"]
    verbs: ["get","list","watch"]
  - apiGroups: ["discovery.k8s.io"]
    resources: ["endpointslices"]
    verbs: ["get","list","watch"]
  - apiGroups: ["networking.k8s.io","extensions"]
    resources: ["ingresses","ingressclasses"]
    verbs: ["get","list","watch"]
  # Optional: falls du Traefik-CRDs nutzt (IngressRoute, Middlewares, usw.)
  - apiGroups: ["traefik.containo.us"]
    resources: ["ingressroutes","middlewares","tlsoptions","traefikservices","ingressroutetcps","ingressrouteudps"]
    verbs: ["get","list","watch"]

---
# =========================
# RBAC: ClusterRoleBinding
# =========================
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: traefik-ingress-controller
subjects:
  - kind: ServiceAccount
    name: traefik-ingress-controller
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: traefik-ingress-controller
  apiGroup: rbac.authorization.k8s.io

---
# =========================
# IngressClass
# =========================
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: traefik
spec:
  controller: traefik.io/ingress-controller

---
# =========================
# Deployment
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traefik
  namespace: kube-system
  labels:
    app: traefik
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: traefik-kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traefik
      app.kubernetes.io/name: traefik
      app.kubernetes.io/instance: traefik-kube-system
  template:
    metadata:
      labels:
        app: traefik
        app.kubernetes.io/name: traefik
        app.kubernetes.io/instance: traefik-kube-system
    spec:
      serviceAccountName: traefik-ingress-controller
      containers:
        - name: traefik
          image: traefik:v2.10
          args:
            - "--entrypoints.web.address=:80"
            - "--entrypoints.websecure.address=:443"
            - "--providers.kubernetescrd"
            - "--providers.kubernetesingress=true"
            - "--providers.kubernetesingress.ingressclass=traefik"
            # Dashboard nur für Debug; NICHT in Prod nach außen exponieren
            - "--api.insecure=true"
          ports:
            - name: web
              containerPort: 80
            - name: websecure
              containerPort: 443
          # (optional) Readiness/Liveness-Probes könnten ergänzt werden

---
# =========================
# Service (NodePort)
# =========================
apiVersion: v1
kind: Service
metadata:
  name: traefik-service
  namespace: kube-system
  labels:
    app: traefik
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: traefik-kube-system
spec:
  type: NodePort
  selector:
    app: traefik
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: traefik-kube-system
  ports:
    - name: web
      port: 80
      targetPort: 80
      nodePort: 32080
    - name: websecure
      port: 443
      targetPort: 443
      nodePort: 32443

